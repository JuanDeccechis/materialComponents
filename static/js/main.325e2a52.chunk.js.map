{"version":3,"sources":["context/ThemeContext.jsx","button/Button.jsx","context/ThemeCharger.jsx","App.js","registerServiceWorker.js","actions.js","reducer.js","sagas.js","index.js"],"names":["ThemeContext","React","createContext","withTheme","Component","props","Consumer","theme","state","className","this","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","types","LOGIN","FETCH_USERS_SUCCESS","FETCH_USERS_FAIL","fetchUsersFail","type","initialState","user","loading","reducer","action","payload","loadUsers","watchLoadUsers","rootSaga","call","axios","get","res","status","put","users","data","takeEvery","FETCH_USERS_START","all","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.325e2a52.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ThemeContext = React.createContext('light');\nexport function withTheme(Component) {\n    return function ThemedComponent(props) {\n        return (\n            <ThemeContext.Consumer>\n                {\n                    theme =>\n                        <Component { ...props } theme = { theme } />\n                }\n            </ThemeContext.Consumer>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { withTheme } from '../context/ThemeContext';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render(){\n      return(\n        <button>contenido</button>\n      )\n  }\n}\n\nexport default withTheme(Button);\n","import React, { Component } from 'react';\n\nimport { ThemeContext } from './ThemeContext';\nimport './theme.css';\n\nclass ThemeChanger extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            theme: 'dark',\n            switchDark: true\n        };\n        this.handleSwitch = this.handleSwitch.bind(this);\n    }\n    \n    handleSwitch(event){\n        let newTheme = this.state.switchDark ? 'light' : 'dark';\n        this.setState({ switchDark: !this.state.switchDark, theme: newTheme });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container-switcher\">\n                    <span className=\"label-switcher\"> Modo nocturno: </span>\n                    <label class=\"switch\">\n                        <input type=\"checkbox\" checked={this.state.switchDark} onChange={this.handleSwitch} />\n                        <span class=\"slider round\"></span>\n                    </label>\n                </div>\n                <ThemeContext.Provider value={this.state.theme} >\n                    {this.props.children}\n                </ThemeContext.Provider>\n            </div>\n        );\n    }\n}\n\nexport default ThemeChanger;","import React, { Component } from \"react\";\nimport './App.css';\n\nimport { ThemeContext } from './context/ThemeContext';\nimport ThemeChanger from './context/ThemeCharger';\n\nimport { withTheme } from './context/ThemeContext';\nimport Button from './button/Button';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className={`app ${this.props.theme}`}>\n          <Button/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withTheme(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","\nexport const types = {\n    LOGIN: \"LOGIN\",\n  \n    FETCH_USERS_SUCCESS: \"FETCH_USERS_SUCCESS\",\n    FETCH_USERS_FAIL: \"FETCH_USERS_FAIL\",\n  };\n  \n  export const login = () => {\n    return {\n      type: types.LOGIN\n    };\n  };\n  \n  //estas funciones y sus types estan de mas para el ejemplo de saga\n  export const fetchUsersSuccess = users => {\n    return {\n      type: types.FETCH_USERS_SUCCESS,\n      payload: users\n    };\n  };\n  \n  export const fetchUsersFail = () => {\n    return {\n      type: types.FETCH_USERS_FAIL\n    };\n  };\n  ","import { types } from \"./actions\";\n\nconst initialState = {\n  user: \"\",\n  loading: false,\n  error: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case types.LOGIN: {\n      return {\n        ...state,\n        user: action.payload\n      }\n    }\n    default: \n      return state;\n  }\n};\n\nexport default reducer;\n","\nimport { call, put, takeEvery, all, } from 'redux-saga/effects'\nimport { types, fetchUsersSuccess, fetchUsersFail } from './actions'\nimport axios from 'axios';\n\n//este saga se deja de ejemplo, pero no se utiliza en la app\nfunction* loadUsers() {\n  try {\n    const res = yield call(axios.get, 'https://jsonplaceholder.typicode.com/users')\n    if(res.status === 200) {\n      yield put(fetchUsersSuccess(res.data))\n    }\n    else {\n      yield put(fetchUsersFail())\n    }\n  } catch (error) {\n    yield put(fetchUsersFail(error))\n  }\n}\n\nfunction* watchLoadUsers() {\n  yield takeEvery(types.FETCH_USERS_START, loadUsers)\n}\n\nexport default function* rootSaga() {\n  yield all([\n    watchLoadUsers(),\n  ])\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//desde aca cambia por reducer/saga\n//import reportWebVitals from './reportWebVitals';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducer\"; //despues va a cambiar por el composeReducer\nimport rootSaga from './sagas'; //despues va a cambiar por un grupo de saga\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  /*<React.StrictMode>\n    <App />\n  </React.StrictMode>,*/\n  //cambia porque ahora usa el store global\n  <Provider store={store}> \n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n//reportWebVitals();\n"],"sourceRoot":""}